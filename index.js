import { join, dirname } from 'path'
import { createRequire } from 'module';
import { fileURLToPath } from 'url'
import { setupMaster, fork } from 'cluster'
import { watchFile, unwatchFile } from 'fs'
import cfonts from 'cfonts';
import { createInterface } from 'readline'
import yargs from 'yargs'
import express from 'express'
import chalk from 'chalk'
import path from 'path'
import os from 'os'
import { promises as fsPromises } from 'fs'

// https://stackoverflow.com/a/50052194
const __dirname = dirname(fileURLToPath(import.meta.url))
const require = createRequire(__dirname) //Incorpora la capacidad de crear el m√©todo 'requerir'
const { name, author } = require(join(__dirname, './package.json')) //https://www.stefanjudis.com/snippets/how-to-import-json-files-in-es-modules-node-js/
const { say } = cfonts
const rl = createInterface(process.stdin, process.stdout)

//const app = express()
//const port = process.env.PORT || 8080;

// Mostrar el texto 'ùë®ùíÖùíéùíäùíè\nùëªùë≤' en la consola con un estilo de fuente y gradiente de color espec√≠fico
say('Admin\nBot\nTK', {
    font: 'chrome',              // Estilo de fuente utilizado ('chrome')
    align: 'center',             // Alineaci√≥n del texto en el centro
    gradient: ['red', 'magenta'] // Gradiente de colores utilizado (de rojo a magenta)
})

// Mostrar el texto 'Por ùë±ùíêùíÇùíè-ùëªùë≤' en la consola con otro estilo de fuente y gradiente de color
say(`Por Joan-TK`, {
    font: 'console',             // Estilo de fuente utilizado ('console')
    align: 'center',             // Alineaci√≥n del texto en el centro
    gradient: ['red', 'magenta'] // Gradiente de colores utilizado (de rojo a magenta)
})

// Variable para controlar si el proceso ya est√° en ejecuci√≥n
var isRunning = false

// Funci√≥n as√≠ncrona para iniciar un archivo espec√≠fico
async function start(file) {
    // Verificar si el proceso ya est√° en ejecuci√≥n, y si es as√≠, no continuar
    if (isRunning) return
    isRunning = true // Marcar que el proceso est√° en ejecuci√≥n

    // Obtener la ruta actual del archivo
    const currentFilePath = new URL(import.meta.url).pathname

    // Configurar los argumentos para ejecutar el archivo, incluyendo los argumentos de la l√≠nea de comandos
    let args = [join(__dirname, file), ...process.argv.slice(2)]

    // Mostrar en la consola los argumentos con una fuente y gradiente espec√≠ficos
    say([process.argv[0], ...args].join(' '), {
        font: 'console',            // Estilo de fuente ('console')
        align: 'center',            // Alineaci√≥n del texto en el centro
        gradient: ['red', 'magenta'] // Gradiente de colores (rojo a magenta)
    })

    // Configurar el proceso maestro para ejecutar el archivo especificado
    setupMaster({
        exec: args[0],         // Archivo a ejecutar
        args: args.slice(1)    // Argumentos adicionales
    })

    // Crear un proceso hijo
    let p = fork()

    // Manejar mensajes enviados desde el proceso hijo
    p.on('message', data => {
        switch (data) {
            // Reiniciar el proceso si se recibe el mensaje 'reset'
            case 'reset':
                p.process.kill()     // Terminar el proceso hijo
                isRunning = false    // Marcar que ya no est√° en ejecuci√≥n
                start.apply(this, arguments) // Reiniciar el proceso
                break
            // Enviar el tiempo de actividad del proceso si se recibe el mensaje 'uptime'
            case 'uptime':
                p.send(process.uptime()) // Enviar el tiempo de actividad
                break
        }
    })
}

// Escuchar el evento 'exit' del proceso hijo
p.on('exit', (_, code) => {
    // Marcar que el proceso ya no est√° en ejecuci√≥n
    isRunning = false

    // Mostrar un mensaje de error en la consola con el c√≥digo de salida
    console.error('‚ö†Ô∏è ERROR ‚ö†Ô∏è >> ', code)

    // Reiniciar el proceso llamando a la funci√≥n 'start' con el archivo 'main.js'
    start('main.js')

    // Si el c√≥digo de salida es 0, terminar la funci√≥n aqu√≠
    if (code === 0) return

    // Vigilar el archivo especificado en 'args[0]'
    watchFile(args[0], () => {
        // Dejar de vigilar el archivo
        unwatchFile(args[0])

        // Reiniciar el proceso llamando nuevamente a 'start' con el archivo original
        start(file)
    })
})

// Importar m√≥dulos necesarios
const ramInGB = os.totalmem() / (1024 * 1024 * 1024); // Calcula la memoria total del sistema en GB
const freeRamInGB = os.freemem() / (1024 * 1024 * 1024); // Calcula la memoria RAM libre del sistema en GB
const packageJsonPath = path.join(path.dirname(currentFilePath), './package.json'); // Define la ruta al archivo package.json

try {
    // Intentar leer el archivo package.json
    const packageJsonData = await fsPromises.readFile(packageJsonPath, 'utf-8');
    const packageJsonObj = JSON.parse(packageJsonData); // Convertir los datos JSON en un objeto JavaScript
    const currentTime = new Date().toLocaleString(); // Obtener la hora actual

    let lineM = '‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ „Äã';

    // Mostrar informaci√≥n del sistema y del proyecto en la consola
    console.log(chalk.yellow(`‚ï≠${lineM}
‚îä${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}
‚îä${chalk.blueBright('‚îä')}${chalk.yellow(`üñ•Ô∏è ${os.type()}, ${os.release()} - ${os.arch()}`)}
‚îä${chalk.blueBright('‚îä')}${chalk.yellow(`üíæ Total RAM: ${ramInGB.toFixed(2)} GB`)}
‚îä${chalk.blueBright('‚îä')}${chalk.yellow(`üíΩ Free RAM: ${freeRamInGB.toFixed(2)} GB`)}
‚îä${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}
‚îä${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}
‚îä${chalk.blueBright('‚îä')} ${chalk.blue.bold(`üü¢INFORMACI√ìN :`)}
‚îä${chalk.blueBright('‚îä')} ${chalk.blueBright('‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')} 
‚îä${chalk.blueBright('‚îä')}${chalk.cyan(`üíö Nombre: ${packageJsonObj.name}`)}
‚îä${chalk.blueBright('‚îä')}${chalk.cyan(`üíª Versi√≥n: ${packageJsonObj.version}`)}
‚îä${chalk.blueBright('‚îä')}${chalk.cyan(`üíú Descripci√≥n: ${packageJsonObj.description}`)}
‚îä${chalk.blueBright('‚îä')}${chalk.cyan(`üò∫ Autor del Proyecto: ${packageJsonObj.author.name} (@gata_dios)`)}
‚îä${chalk.blueBright('‚îä')}${chalk.blueBright('‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')} 
‚îä${chalk.blueBright('‚îä')}${chalk.yellow(`üíú Colaboradores:`)}
‚îä${chalk.blueBright('‚îä')}${chalk.yellow(`‚Ä¢ JJoan02 (Joan-TK)`)}
‚îä${chalk.blueBright('‚îä')}${chalk.yellow(`‚Ä¢ KatashiFukushima (Katashi)`)}
‚îä${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')} 
‚îä${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}
‚îä${chalk.blueBright('‚îä')}${chalk.cyan(`‚è∞ Hora Actual :`)}
‚îä${chalk.blueBright('‚îä')}${chalk.cyan(`${currentTime}`)}
‚îä${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')} 
‚ï∞${lineM}`));

    // Mantener el proceso en ejecuci√≥n indefinidamente
    setInterval(() => {}, 1000);

} catch (err) {
    // Manejo de errores al leer el archivo package.json
    console.error(chalk.red(`‚ùå No se pudo leer el archivo package.json: ${err}`));
}

// Importa la librer√≠a 'yargs' para el manejo de argumentos de l√≠nea de comandos
const yargs = require('yargs');

// Procesa los argumentos de l√≠nea de comandos
let opts = yargs(process.argv.slice(2))
  .exitProcess(false) // Evita que 'yargs' termine el proceso autom√°ticamente
  .parse(); // Analiza los argumentos y los convierte en un objeto

// Verifica si la opci√≥n 'test' no est√° presente en los argumentos
if (!opts['test']) {
  // Verifica si no hay listeners (escuchadores) registrados en el objeto 'rl'
  if (!rl.listenerCount()) {
    // Agrega un listener para el evento 'line' del objeto 'rl'
    rl.on('line', line => {
      // Emite el evento 'message' con la l√≠nea de entrada, eliminando los espacios en blanco alrededor
      p.emit('message', line.trim());
    });
  }
}

// Llama a la funci√≥n 'start' con el archivo 'main.js' como argumento
start('main.js');
